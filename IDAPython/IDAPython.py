from idaapi import *
import re
'''

'''


def parse_LDR(addr, regs):
	des = idc.GetOpnd(addr, 0)
	pat = re.compile(r'.+"(.+)"')
	asm = idc.GetDisasm(addr)
	m = pat.match(asm)
	if m:
		regs[des] = m.group(1)
	else:
		pat2 = re.compile(r'.+#(.+)@.+')
		m2 = pat2.match(asm)
		if m2:
			regs[des] = m2.group(1)
		else:
			regs[des] = 'Unknown'
			

def getX0FromFuncName(func_name):
	pat = re.compile(r".+\[(\S+).+")
	m = pat.match(func_name)
	if m:
		return m.group(1)
	else:
		return 'Unknown'


def analysis_Xt(addr, xt, start_addr):
	
	if idc.GetMnem(addr) == 'LDR':
		return parse_LDR(addr)


def main():
	
	msg_send_dict = dict()
	BL_dict = dict()
	
	for func in Functions():
		
		if idc.SegName(func) == '__stubs':
			continue
			
		func_name = idc.GetFunctionName(func)
		
		#print 'start analyse [ ',func_name,' ]'
		
		regs = dict()  #store register value in this function
		regs['X0'] = getX0FromFuncName(func_name)
		regs['X1'] = 'Unknown'
		
		#if func_name != '-[MyCry md5:]':
			#continue
		
		print 'start analyse md5'
		
		for addr in FuncItems(func):
			
			if idc.GetMnem(addr) == 'MOV':
				des = idc.GetOpnd(addr, 0)
				src = idc.GetOpnd(addr, 1)
				if src.startswith('#'):   # MOV X0 #0Xffff
					regs[des]=src[1:]
				else:
					if src in regs:
						regs[des] = regs[src]
					elif des in regs:
						regs[des] = 'Unknown'
				print regs	
			elif idc.GetMnem(addr) == 'LDR':
				parse_LDR(addr, regs)
			elif idc.GetMnem(addr) == 'BL':
				lable = idc.GetOpnd(addr, 0)
				if lable in BL_dict:
					if func_name not in BL_dict[lable]:
						BL_dict[lable].append(func_name)
				else:
					BL_dict[lable] = [func_name]
						
			
			# _objc_msgSend, _objc_msgSend_Super, _objc_msgSend_stret
			if idc.GetOpnd(addr, 0) == '_objc_msgSend':
				msg_send_dict[addr] = [func_name, regs['X0'], regs['X1']]
				
	'''for lable in BL_dict:
		print lable, BL_dict[lable]
		print 
	'''

if __name__ == '__main__':
	main()	
			
			


			
			
			
		
