package com.bupt.ios.analyzer;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

import com.bupt.ios.commonData.IdaResultSet;
import com.bupt.ios.commonData.ProjectParameters;

public class IdaResultXmlParser {

	private static String fileSepatator = System.getProperty("file.separator");

	public static void parseBL() throws JDOMException, IOException{
//		String  blPath = ProjectParameters.getDetempPath()+fileSepatator+"ida"+fileSepatator+"BL.xml";
				String blPath ="/Users/konghaohao/Documents/git_workspace/ios-vulnerability-detection/detemp/2016-08-30-21-29-40/ida/BL.xml";
		SAXBuilder saxBuilder = new SAXBuilder();

		Document document = saxBuilder.build(new File(blPath));
		Element root = document.getRootElement();
		List<Element> calledList = root.getChildren("Called");
		for(Element calledEle: calledList){
			String calledApi = calledEle.getAttributeValue("name");
			List<String> value = new ArrayList<String>();
			List<Element> callerList = calledEle.getChildren("Caller");
			for(Element callerEle:callerList){
				value.add(callerEle.getText().trim());
			}
			IdaResultSet.addBL(calledApi, value);
		}

	}

	public static void parseMsg() throws JDOMException, IOException{
//		String  msgPath = ProjectParameters.getDetempPath()+fileSepatator+"ida"+fileSepatator+"MSG.xml";
		String msgPath = "/Users/konghaohao/Documents/git_workspace/ios-vulnerability-detection/detemp/2016-08-30-21-29-40/ida/MSG.xml";
		SAXBuilder saxBuilder = new SAXBuilder();
		Document docment = saxBuilder.build(new File(msgPath));
		Element root = docment.getRootElement();
		List<Element> funList = root.getChildren("function");
		for(Element funEle:funList){
			String funName = funEle.getAttributeValue("name");
			List<Map<String, String>> valueList = new ArrayList<Map<String,String>>();
			List<Element> msgList = funEle.getChildren("msg_send");
			for(Element msgEle:msgList){
				Map<String, String> regMap = new HashMap<String, String>();
				String regContent = msgEle.getText().trim();
				String[] eachReg = regContent.split(";\n");
				//去除最后一个寄存器信息中的多余的分号
				eachReg[eachReg.length-1] = eachReg[eachReg.length-1].substring(0, eachReg[eachReg.length-1].length()-1);
				for(int i=0;i<eachReg.length;i++){
					String regName = eachReg[i].split("=")[0];
					String regValue = eachReg[i].split("=")[1];
					regMap.put(regName, regValue);
				}
				
				valueList.add(regMap);
			}
			IdaResultSet.addMSG(funName, valueList);
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
				try {
					IdaResultXmlParser.parseMsg();
				} catch (JDOMException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		System.out.println(IdaResultSet.getMSG());
	}

}
