package com.bupt.ios.analyzer;

import java.sql.*;
import java.util.*;

import org.json.*;

public class IdaResultSqlParser {


	/**
	 * 解析idapython生成的db文件
	 * @param sqlPath path of bl.db
	 */
	public static void parseBLSql(String sqlPath){

		Connection conn = null;
		Statement stmt = null;
		try {
			Class.forName("org.sqlite.JDBC");
			conn = DriverManager.getConnection("jdbc:sqlite:"+sqlPath);
//			System.out.println("Opened database successfully");

			stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery( "SELECT * FROM BlTable;" );
			while ( rs.next() ) {
				BlMsg blMsg = new BlMsg();
				String funName = rs.getString("FUNC");
				String lable = rs.getString("BL");
				String regs = rs.getString("REGS");
				Map<String, String> regsMap = new HashMap<String , String>();
				if(regs!=null){
					JSONObject jsonObject = new JSONObject(regs);
					Iterator it = jsonObject.keys();
					while(it.hasNext()){
						String regsName = String.valueOf(it.next());
						String regsInfo = (String) jsonObject.get(regsName);
						regsMap.put(regsName, regsInfo);
						//						System.out.println(regsName+":"+regsInfo);
					}
				}
				blMsg.setName(lable);
				blMsg.setRegs(regsMap);
				
				if(IdaResultSet.getMSG().containsKey(funName)){//如果函数已经在结果集中
					IdaResultSet.getMSG().get(funName).add(blMsg);
				}else{//如果函数不在结果集中
					IdaResultSet.addMSG(funName, new ArrayList<BlMsg>());
				}
			}
			
			rs.close();
			stmt.close();
			conn.close();

//			System.out.println("Operation done successfully");
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

//	public static void main(String[] args) {
//		IdaResultSqlParser.parseBLSql("/Users/konghaohao/Desktop/iosIDAPython/bl.db");
//		Map<String, List<BlMsg>> map = IdaResultSet.getMSG();
//		System.out.println(map);
//	}

}
