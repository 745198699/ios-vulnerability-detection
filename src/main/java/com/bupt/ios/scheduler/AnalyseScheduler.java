package com.bupt.ios.scheduler;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.activation.MimetypesFileTypeMap;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.bupt.ios.commonData.ProjectParameters;
import com.bupt.ios.decompile.IdaAnalyse;
import com.bupt.ios.decompile.UnzipIpa;

public class AnalyseScheduler {
	private static String fileSeparator = System.getProperty("file.separator");
	private static Logger logger = LogManager.getLogger(AnalyseScheduler.class);
	
	
	public void schdular(){
		//首先解压ipa文件
		File unzipPath =new File( ProjectParameters.getDetempPath()+fileSeparator+"unzip");
		if(!unzipPath.exists())
			unzipPath.mkdirs();
		try {
			UnzipIpa.unzip(ProjectParameters.getIpaPath(), unzipPath.getAbsolutePath());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.warn("unzip failed");
		}
		
		//定位可执行文件
		String exeName = "";
		for(File payload:unzipPath.listFiles()){
			System.out.println(payload);
			if(payload.getName().equals("Payload")){
				for(File app:payload.listFiles()){
					exeName = app.getName().split("\\.app")[0];
					ProjectParameters.setAppName(exeName);
					for(File exeFile:app.listFiles()){
						if(exeFile.getName().equals(exeName)){
							System.err.println(exeFile.getAbsolutePath());
							ProjectParameters.setExeFilePath(exeFile.getAbsolutePath());
						}
					}
				}
			}
		}
		
		//使用ida对可执行文件进行解析
		new IdaAnalyse().genIDB();
		
		
	}
	
	

}
